import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ —Ñ–∞–∑ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
log = pd.read_csv("phase_res/phase_log.csv")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –î–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–∑ –∫–∞–∫ –≤—Ö–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
X = log[[
    "VEHICLES_before",
    "QUEUEDELAY_before",
    "SPEEDAVGARITHM_before",
    "QLEN_before",
    "QLENMAX_before"
]]

# –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Ñ–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
y = log[["phase1", "phase2"]]

# üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# üöÄ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
if len(X_scaled) < 2:
    print("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ–π –≤—ã–±–æ—Ä–∫–µ.")
    X_train, X_test = X_scaled, X_scaled
    y_train, y_test = y, y
else:
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.2, random_state=42
    )

# üß† –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(2)  # –≤—ã—Ö–æ–¥: –¥–≤–µ —Ñ–∞–∑—ã (—Å–≤–µ—Ç–æ—Ñ–æ—Ä 1 –∏ 2)
])

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# üèãÔ∏è –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
if len(X_train) < 2:
    model.fit(X_train, y_train, epochs=100, batch_size=1, verbose=1)
else:
    model.fit(X_train, y_train, epochs=100, batch_size=8, verbose=1)

# üí¨ –û—Ü–µ–Ω–∫–∞
loss, mae = model.evaluate(X_test, y_test)
print(f"–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE): {mae:.2f} —Å–µ–∫—É–Ω–¥")

# üí° –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Ö–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
last_input = log[[
    "VEHICLES_before",
    "QUEUEDELAY_before",
    "SPEEDAVGARITHM_before",
    "QLEN_before",
    "QLENMAX_before"
]].iloc[[-1]]

last_input_scaled = scaler.transform(last_input)
predicted_phases = model.predict(last_input_scaled)

print("\nüîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ñ–∞–∑—ã:")
print(f"–°–≤–µ—Ç–æ—Ñ–æ—Ä 1 (ID 1+2): {predicted_phases[0][0]:.1f} —Å–µ–∫—É–Ω–¥")
print(f"–°–≤–µ—Ç–æ—Ñ–æ—Ä 2 (ID 3+4): {predicted_phases[0][1]:.1f} —Å–µ–∫—É–Ω–¥")